// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package m.l.wsb_mobile_app.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class TaskJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Task>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "description",
      "colorType", "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val colorTypeAdapter: JsonAdapter<ColorType> = moshi.adapter(ColorType::class.java,
      emptySet(), "colorType")

  @Volatile
  private var constructorRef: Constructor<Task>? = null

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Task").append(')') }

  public override fun fromJson(reader: JsonReader): Task {
    var title: String? = null
    var description: String? = null
    var colorType: ColorType? = null
    var id: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        1 -> description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("description", "description", reader)
        2 -> colorType = colorTypeAdapter.fromJson(reader) ?: throw Util.unexpectedNull("colorType",
            "colorType", reader)
        3 -> {
          id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff7.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Task(
          title = title ?: throw Util.missingProperty("title", "title", reader),
          description = description ?: throw Util.missingProperty("description", "description",
              reader),
          colorType = colorType ?: throw Util.missingProperty("colorType", "colorType", reader),
          id = id as String
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Task> = this.constructorRef ?:
          Task::class.java.getDeclaredConstructor(String::class.java, String::class.java,
          ColorType::class.java, String::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          title ?: throw Util.missingProperty("title", "title", reader),
          description ?: throw Util.missingProperty("description", "description", reader),
          colorType ?: throw Util.missingProperty("colorType", "colorType", reader),
          id,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Task?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("description")
    stringAdapter.toJson(writer, value_.description)
    writer.name("colorType")
    colorTypeAdapter.toJson(writer, value_.colorType)
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.endObject()
  }
}
